释放
由于netty中有直接内存的ByteBuf实现，直接内存最好手动释放，而不是等gc垃圾回收；
*UnpooledHeapByteBuf使用jvm内存，只需等GC回收内存即可；
*UnpooledDirectByteBuf使用直接内存，需要特殊方法回收内存；
*PooledByteBuf和他子类使用池化机制，需要更复杂的规则来回收内存；

netty这里采用了引用计数法来控制回收内存，每个ByteBuf都实现了ReferenceCounted接口；
*每个ByteBuf对象初始计数为1；
*调用release方法计数减1，如果计数为0，ByteBuf内存被回收；
*调用retain方法计数加1，表示调用者没用完之前，其他handler即使调用了release也不会回收
*当计数为0时，底层内存会被回收，这时即使btyebuf对象还在，其各个方法均无法正常使用；

释放规则
因为pipeline的存在，一般需要将ByteBuf传递给下一个channelHandler，如果在每个channelHandler
中都去调用release，就失去传递性(如果在这个channelHandler内这个ByteBuf已完成使命则无需传递)
总结：谁是最后使用者，谁release

ByteBuf生命周期
1,创建
对于nio实现，io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe.read
方法中首次创建ByteBuf放入pipeline(line163 pipeline.fireChannelRead(byteBuf));
2，入站ByteBuf处理原则
*对于原始byte不做处理，调用ctx.fireChannelRead(msg)向后传递，这时无需release；
*将原始ByteBuf转移为其他类型的java对象，这时候ByteBuf就没用，必须release；
*如果不调用ctx.fireChannelRead(msg)向后传递，那么也必须release；
*注意各种异常，如果ByteBuf没有成功传输到下一个channelhandler，必须release；
*假设消息一直向后传，那么tailContext会是负责释放未处理消息(原始ByteBuf)
3，出站ByteBuf处理原则
*出站消息最终都会转为ByteBuf输出，一直向前传，由headcontext flush后release
4，处理异常原则
有时候不知道bytebuf被引用多少次但又要彻底释放，可以使用while直到全是释放为止；
while(!buffer.realse()){
    //do sth;
};
当bytebuf被传到pipeline的head与tail时，bytebuf会被其中的方法彻底释放；

tailConext中释放bytebuf的源码如下:

protected void onUnhandledInboundMessage(Object msg) {
    try {
        logger.debug("Discarded inbound message {} that reached at the tail of the pipeline. Please check your pipeline configuration.", msg);
    } finally {
        // 具体的释放方法
        ReferenceCountUtil.release(msg);
    }
}

public static boolean release(Object msg) {
	return msg instanceof ReferenceCounted ? ((ReferenceCounted)msg).release() : false;
}




